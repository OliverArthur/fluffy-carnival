///-------------------------- GRID -------------------------
/// GRID - mixins
///-------------------------------------------------------------
@use '../1-settings/settings' as var;
@use './mixins-mq' as mq;

/*
	Define the grid container

	Params:
		- numbers of columns
		- gap-col between columns
		- gap-row between rows
*/
@mixin grid($columns: var.$grid-columns, $gap-col: var.$grid-gap, $gap-row: var.$grid-gap) {
	display: grid;
	grid-template-columns: repeat(2, 1fr);
	grid-template-rows: 1fr;
	gap: $gap-row $gap-col;

	@include mq.mq('md') {
		grid-template-columns: repeat($cols_number, minmax(0, 1fr));
		gap: $gap-row $gap-col;
	}
}

/*
	Define the grid container with fixed width

	Params:
		- numbers of columns
		- gap-col between columns
		- gap-row between rows
*/
@mixin grid-fixed($columns: var.$grid-columns, $gap-col: var.$grid-gap, $gap-row: var.$grid-gap) {
	@include grid($columns, $gap-col, $gap-row);

	@include mq.mq('lg') {
		grid-template-columns: 1fr repeat($columns, var.$grid-col-max-width) 1fr;
	}
}

/*
	Define a grid cell using lines

	Params:
		- col start line
		- col end line
		- row start line
		- row end line
*/
@mixin grid-cell-lines(
	$col-start: 0,
	$col-end: var.$grid-columns,
	$row-start: null,
	$row-end: null
) {
	grid-column: $col-start / $col-end;

	@if $row-start and $row-end {
		grid-row: $row-start $row-end;
	}
}

/*
	Define a grid cell using span size

	Params:
		- col span size
		- col start line
*/
@mixin grid-cell-span($col-span-size: var.$grid-columns, $col-start: null) {
	@if $col-star {
		grid-column: $col-start / span $col-span-size;
	} @else {
		grid-column: span $col-span-size;
	}
}


/*
	Define a grid cell ordering

	Params:
		- col order
		- row order
*/
@mixin grid-cell-order($type: 'col', $order: 1) {
	@if $type == 'col' {
		order: $order;
	} @else {
		order: $order;
	}
}
